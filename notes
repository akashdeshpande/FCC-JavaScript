JavaScript : What I learned

JS is a high level language that runs in most browsers, and is a core component of the Internet with HTML and CSS

// Single line comment

/*  Multi line
comment
*/

Data types: 
undefined
null
boolean
string
symbol
bigint
number
object

In JavaScript we end statements with semicolons. Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.
= is known as the assignment operator

When JavaScript variables are declared, they have an initial value of undefined. If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number". If you concatenate a string with an undefined variable, you will get a literal string of "undefined".

In JavaScript all variables and function names are case sensitive. 

% is known as the remainder operator

var myName = "your name"; "your name" is called a string literal. 

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

.length is used to calculate string length

In JS strings are immutable, which means individual characters of a string cannot be changed once created.
This does not mean that Strings cannot hange over time, just that individual characters of a string cannot be changed.

Unlike Strings, arrays are mutable

.push() pushes element ot the end of the array
.pop() pops the element at the end of the array. pop() returns the popped element, we can store this element into a new var
.shift() pops the element from the start of the array
.unshift() adds element to the start of the array

Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or "passed") into a function when it is called are known as arguments.
basically: fun(param1, param2){
    //logic
}
fun(arg1, arg2);

Variables which are used without the var keyword are automatically created in the global scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with var.

queue: .push(element), .shift()
stack: .push(), pop()

There are many comparison operators in JavaScript, all of these return a boolean
== compares value
In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. This is known as "Type Coercion". Once it does, however, it can compare terms as follows:
1   ==  1   // true
1   ==  2   // false
1   == '1'  // true
"3" ==  3   // true

Strict equality (===) is the counterpart to the equality operator (==). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.
In JavaScript, you can determine the type of a variable or a value with the typeof operator, as follows:
typeof 3   // returns 'number'
typeof '3' // returns 'string'

== | !=
=== | !==

In switch-case, case values are tested with strict equality (===). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.

switch(element) {
    case x:
        //code
        break;
    case y:
        //code
        break;
        .
        .
        .
    default:
        //code
        break;
}

Shortening code, coparison operators return tue or false, so rather than having if else statements for returning true or false, we can use
return a <operator> b;, example:

function isEqual(a,b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}

can be replaced with 

function isEqual(a,b) {
  return a === b;
}

Remember that undefined is a keyword, not a string.

ar cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

In this example, all the properties are stored as strings, such as - "name", "legs", and "tails". However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:

var anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};

However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.
