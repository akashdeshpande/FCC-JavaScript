JavaScript : What I learned

JS is a high level language that runs in most browsers, and is a core component of the Internet with HTML and CSS

// Single line comment

/*  Multi line
comment
*/

Data types: 
undefined
null
boolean
string
symbol
bigint
number
object

In JavaScript we end statements with semicolons. Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.
= is known as the assignment operator

When JavaScript variables are declared, they have an initial value of undefined. If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number". If you concatenate a string with an undefined variable, you will get a literal string of "undefined".

In JavaScript all variables and function names are case sensitive. 

% is known as the remainder operator

var myName = "your name"; "your name" is called a string literal. 

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed

.length is used to calculate string length

In JS strings are immutable, which means individual characters of a string cannot be changed once created.
This does not mean that Strings cannot hange over time, just that individual characters of a string cannot be changed.

Unlike Strings, arrays are mutable

.push() pushes element ot the end of the array
.pop() pops the element at the end of the array. pop() returns the popped element, we can store this element into a new var
.shift() pops the element from the start of the array
.unshift() adds element to the start of the array

Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or "passed") into a function when it is called are known as arguments.
basically: fun(param1, param2){
    //logic
}
fun(arg1, arg2);

Variables which are used without the var keyword are automatically created in the global scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with var.

queue: .push(element), .shift()
stack: .push(), pop()

There are many comparison operators in JavaScript, all of these return a boolean
== compares value
In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. This is known as "Type Coercion". Once it does, however, it can compare terms as follows:
1   ==  1   // true
1   ==  2   // false
1   == '1'  // true
"3" ==  3   // true

Strict equality (===) is the counterpart to the equality operator (==). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.
In JavaScript, you can determine the type of a variable or a value with the typeof operator, as follows:
typeof 3   // returns 'number'
typeof '3' // returns 'string'

== | !=
=== | !==

In switch-case, case values are tested with strict equality (===). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.

switch(element) {
    case x:
        //code
        break;
    case y:
        //code
        break;
        .
        .
        .
    default:
        //code
        break;
}

Shortening code, coparison operators return tue or false, so rather than having if else statements for returning true or false, we can use
return a <operator> b;, example:

function isEqual(a,b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}

can be replaced with 

function isEqual(a,b) {
  return a === b;
}

Remember that undefined is a keyword, not a string.

ar cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

In this example, all the properties are stored as strings, such as - "name", "legs", and "tails". However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:

var anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};

However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.

JSON
There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.
1. obj.property
2. obj["property"]
3. prop = "property";
    obj[prop]

Don't use do operator when you have a variable stored with property to look up. Use bracket notation instead.

 obj["property"]
 

 while (true) {
   //code
 }

 for (var i = 0; i < 10; i++);
 the terminating condition of for loop is not inclusive.
 
----
ES6 - 2015

ES5 was released in 2009
ES6 in 2015

The most recent standardized version is called ECMAScript 6 (ES6), released in 2015. This new version of the language adds some powerful features that will be covered in this section of challenges, including:

    Arrow functions
    Classes
    Modules
    Promises
    Generators
    let and const

var can be overridden, let cant be overridden
var a = 10;
a = 12;
// a becomes 12

let b =15;
b = 6;
// throws error in console
"use strict";
x = 3.14; // throws an error because x is not declared

When you declare a variable with the var keyword, it is declared globally, or locally if declared inside a function.
The let keyword behaves similarly, but with some extra features. When you declare a variable with the let keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.

const is ame as let, except for more additions: once defined, it cannot be changed.

The const declaration has many use cases in modern JavaScript.

Some developers prefer to assign all their variables using const by default, unless they know they will need to reassign the value. Only in that case, they use let.

However, it is important to understand that objects (including arrays and functions) assigned to a variable using const are still mutable. Using the const declaration only prevents reassignment of the variable identifier.

const declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.

Once the object is frozen, you can no longer add, update, or delete properties from it. Any attempt at changing the object will be rejected without an error.

Arrow functions are anonymous functions
... = function() {
  //statements
}
can be written as
... = () => {
  //statemnets
}

When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword return as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:
like :
const myFunc = () => "value";



Just like a regular function, you can pass arguments into an arrow function.

// doubles input value and returns it
const doubler = (item) => item * 2;
doubler(4); // returns 8

If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.

// the same function, without the parameter parentheses
const doubler = item => item * 2;

It is possible to pass more than one argument into an arrow function.

// multiplies the first input value by the second and returns it
const multiplier = (item, multi) => item * multi;
multiplier(4, 2); // returns 8



In order to help us create more flexible functions, ES6 introduces default parameters for functions.

Check out this code:

const greeting = (name = "Anonymous") => "Hello " + name;

console.log(greeting("John")); // Hello John
console.log(greeting()); // Hello Anonymous

The default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter name will receive its default value "Anonymous" when you do not provide a value for the parameter. You can add default values for as many parameters as you want.

funcion(...args), where args is the argument array, and can take many arguments
filter, map, reduce can be applied to such functions
"..." here is known as the rest parameter

